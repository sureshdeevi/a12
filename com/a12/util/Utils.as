package com.a12.util{	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.geom.ColorTransform;	import flash.text.*;		public class Utils	{			/*		Function: createmc			Creates an empty MovieClip and applies an object of properties			Usage1 - Utils.createmc(mc, name, depth, objProps);		Usage2 - somevariable = Utils.createmc(mc, name, depth, objProps);		Usage3 - somemc[somevariable] = Utils.createmc(somemc, somevariable, depth, objProps);			Parameters:				mc - parent MovieClip			name - string of new MovieClip			depth - depth			objProps - object of properties to be applied				Returns: 					MovieClip reference				*/			public static function createmc(mc:Object, name:String, objProps:Object = null) : MovieClip		{			var sp = new MovieClip();			sp.name = name;			for (var i in objProps) {				sp[i] = objProps[i];			}					mc.addChild(sp);			return sp;		}				/*		Function: changeColor		Changes color of movieclip to hex value		Parameters:			mc - movieclip			rgb - hex value of new color		Returns: 			color		*/				public static function changeColor(mc:MovieClip, rgb:Number) : void		{			var colorTransform:ColorTransform = mc.transform.colorTransform;			colorTransform.color = rgb;			mc.transform.colorTransform = colorTransform;					}				/*			Function: drawRect			Basic rectangle drawing, with fill and stroke			Parameters:				mc - MovieClip			w - width			h - height			rgb - fill color			alpha - fill alpha			lineStyle - array				*/		public static function drawRect(mc:MovieClip, w:Number, h:Number, rgb:Number, alpha:Number = 100, lineStyle:Array = null, x:Number = 0, y:Number = 0)		{					mc.graphics.moveTo(x, y);			mc.graphics.beginFill(rgb, alpha);			if(lineStyle != null){				mc.graphics.lineStyle(lineStyle[0], lineStyle[1], lineStyle[2]);			}			mc.graphics.drawRect(x,y,w,h);			mc.graphics.endFill();				}				public static function makeTextfield(mc:Object, display:String, format:TextFormat, props:Object = null )		{			var tf = new TextField();			tf.text = display;						//loop through props .. but in an order ehh?						tf.width = 200;			tf.embedFonts = true;									tf.setTextFormat(format);			mc.addChild(tf);		}			/* 			Function: getPositionByOffset			Finds location in array starting from index based on offset			Parameters:				ind - index			len - length of array			offset - distance (+/-)			Returns: 					number			*/			public static function getPositionByOffset(ind:Number,len:Number,offset:Number) : Number		{			var t = ind+offset;					switch(true)			{				case (t < 0) && (offset<1):					t = (len)-Math.abs(t);				break;						case (t > (len-1)) && (offset>-1):					t = t-len;				break;					}					return t;		}			/* 			Function: toRadians			Converts degrees to radians			Parameters:				deg - degrees			Returns: 					radians			*/			public static function toRadians(deg:Number) : Number		{			return deg * Math.PI/180;		}		}	}